import 'byte.grm' as bytelib;        # load a simple grammar (.grm)
ByteSigma = (bytelib.kSpace | bytelib.kGraph);  # printable characters
ByteSigmaStar = Optimize[ByteSigma*];

export LM = LoadFst['entrain.fst'];  # load trigram language model (.fst)
vocab = SymbolTable['entrain.sym'];  # load model's symbol table (.sym)
Spell = Optimize[StringFile['entrain.alpha', vocab, byte]];
RandomChar = bytelib.kGraph <4.54>;
export RandomWord = Optimize[(RandomChar (RandomChar <0.1>)* ) <2.3>];
SpellOOV = "<unk>".vocab : RandomWord;
SpellFull = Spell | SpellOOV;

# YOU WILL FILL IN THE REST
export Complete = CDRewrite["":ByteSigma*, "", "[EOS]", ByteSigmaStar, 'sim', 'obl'];
# maps to all possible tokens in 'entrain'
export AllLM = Project[SpellFull, 'output'];
# convert from characters in 'byte' to symbols/words in language model
export ChartoLMWord = Optimize[StringFile['entrain.alpha', byte, vocab]];

export CompleteWord = Optimize[Complete @ AllLM @ ChartoLMWord @ LM];

export DelSpaces = CDRewrite[" ".byte:"".byte, "".byte, "".byte, ByteSigmaStar, 'sim', 'obl'];
export SpellText = (SpellFull ("".vocab : " ".byte))*;

# export Generate = LM @ SpellText @ DelSpaces;
export InvLM = Invert[LM];
export InvSpellText = Invert[SpellText];
export InvDelSpaces = Invert[DelSpaces];
export RemoveExtraSpace = CDRewrite[" ".byte:"".byte, " ".byte|"[BOS]", "".byte|"[EOS]", ByteSigmaStar, 'ltr', 'obl'];
export PrintWithOOV = (Spell ("".vocab:" ".byte) | ("<unk>".vocab:"<unk>") ("".vocab:" ".byte))*;
export PrintText = PrintWithOOV @ RemoveExtraSpace;

# Below is the implementation of Telephone for Problem 12(d):
# Usage: grmtest noisy.grm InvTelephone,InvSpellText,InvLM,PrintText
ToOne    = "1";
ToTwo    = "A" | "a" | "B" | "b" | "C" | "c" | "2";
ToThree  = "D" | "d" | "E" | "e" | "F" | "f" | "3";
ToFour   = "G" | "g" | "H" | "h" | "I" | "i" | "4";
ToFive   = "J" | "j" | "K" | "k" | "L" | "l" | "5";
ToSix    = "M" | "m" | "N" | "n" | "O" | "o" | "6";
ToSeven  = "P" | "p" | "Q" | "q" | "R" | "r" | "S" | "s" | "7";
ToEight  = "T" | "t" | "U" | "u" | "V" | "v" | "8";
ToNine   = "W" | "w" | "X" | "x" | "Y" | "y" | "Z" | "z" | "9";
ToZero   = "0";
export Keypad =
  (ToTwo:"2")   | (ToThree:"3")  | (ToFour:"4")  |
  (ToFive:"5")  | (ToSix:"6")    | (ToSeven:"7") |
  (ToEight:"8") | (ToNine:"9")   | (ToZero:"0")  |
  (ToOne:"1");
# All input that is not on the phone dial goes to epsilon
export NotOnKeypad = ByteSigma - Project[Keypad, 'input'];
export NonKeypad = NotOnKeypad:"";

export Telephone = Optimize[(Keypad | NonKeypad) * ];

export InvTelephone = Invert[Telephone];

